from subprocess import Popen, PIPE


octtype2nomadtype = {'float': 'f',
                     'integer': 'C', # Integers are really names, generally!
                     'logical': 'b',
                     'block': 'C',
                     'string': 'C',
                     'flag': 'C'}


json_header = """{
  "type": "nomad_meta_info_1_0",
  "description": "autogenerated nomad meta info for octopus parser",
  "metaInfos": [ %(info)s ]
}"""


json_template = """{
      "description": "%(description)s",
      "dtypeStr": "%(dtypeStr)s",
      "name": "%(name)s",
      "repeats": false,
      "shape": [],
      "superNames": ["%(supername)s"]
    }"""


class OctInputVar:
    def __init__(self, name, octtype, section):
        self.name = name
        self.octtype = octtype
        self.section = section

    def _get_json(self, role, supername):
        description = (r'Octopus %s \"%s\" of type \"%s\" in section \"%s\"'
                       % (role, self.name, self.octtype, self.section))
        return json_template % dict(name='%s_%s' % (supername, self.name),
                                    dtypeStr=octtype2nomadtype[self.octtype],
                                    supername=supername,
                                    description=description)

    def get_input_json(self):
        return self._get_json('input parameter', 'x_octopus_input')

    def get_parserlog_json(self):
        return self._get_json('parser log entry', 'x_octopus_parserlog')


def main():
    searchproc = Popen(['oct-help', '--search', ''],
                       stdout=PIPE)

    oct_vars = []
    for line in searchproc.stdout.readlines():
        name = line.strip()
        printproc = Popen(('oct-help --print %s' % name).split(),
                          stdout=PIPE)
        fd = printproc.stdout

        # Example of output from oct-help:
        # ------------------
        #Variable: Spacing
        #Type:     float
        #Section:  Mesh
        #Description:
        #  The spacing between the points in the mesh. This controls the
        #  quality of the discretization: smaller spacing gives more precise
        #  results but increased computational cost.
        #  (.......)
        #------------------

        allowed_vardata = set(['Variable', 'Type', 'Default', 'Section'])

        vardata = {}
        for line in fd:
            title, remainder = line.split(':', 1)
            if title == 'Description':
                break
            vardata[title] = remainder.strip()

        var = OctInputVar(vardata.get('Variable'),
                          vardata.get('Type'),
                          vardata.get('Section'))
        oct_vars.append(var)

    tokens = []
    for var in oct_vars:
        tokens.append(var.get_input_json())
        tokens.append(var.get_parserlog_json())
    print json_header % dict(info=', '.join(tokens))

if __name__ == '__main__':
    main()
